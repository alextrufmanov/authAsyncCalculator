// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.30.2
// source: proto/asyncCalculator.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AsyncCalculatorService_GetTask_FullMethodName        = "/proto.AsyncCalculatorService/GetTask"
	AsyncCalculatorService_PostTaskResult_FullMethodName = "/proto.AsyncCalculatorService/PostTaskResult"
)

// AsyncCalculatorServiceClient is the client API for AsyncCalculatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Определение сервиса
type AsyncCalculatorServiceClient interface {
	GetTask(ctx context.Context, in *Undef, opts ...grpc.CallOption) (*Task, error)
	PostTaskResult(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*Undef, error)
}

type asyncCalculatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAsyncCalculatorServiceClient(cc grpc.ClientConnInterface) AsyncCalculatorServiceClient {
	return &asyncCalculatorServiceClient{cc}
}

func (c *asyncCalculatorServiceClient) GetTask(ctx context.Context, in *Undef, opts ...grpc.CallOption) (*Task, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Task)
	err := c.cc.Invoke(ctx, AsyncCalculatorService_GetTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *asyncCalculatorServiceClient) PostTaskResult(ctx context.Context, in *TaskResult, opts ...grpc.CallOption) (*Undef, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Undef)
	err := c.cc.Invoke(ctx, AsyncCalculatorService_PostTaskResult_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AsyncCalculatorServiceServer is the server API for AsyncCalculatorService service.
// All implementations must embed UnimplementedAsyncCalculatorServiceServer
// for forward compatibility.
//
// Определение сервиса
type AsyncCalculatorServiceServer interface {
	GetTask(context.Context, *Undef) (*Task, error)
	PostTaskResult(context.Context, *TaskResult) (*Undef, error)
	mustEmbedUnimplementedAsyncCalculatorServiceServer()
}

// UnimplementedAsyncCalculatorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAsyncCalculatorServiceServer struct{}

func (UnimplementedAsyncCalculatorServiceServer) GetTask(context.Context, *Undef) (*Task, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedAsyncCalculatorServiceServer) PostTaskResult(context.Context, *TaskResult) (*Undef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTaskResult not implemented")
}
func (UnimplementedAsyncCalculatorServiceServer) mustEmbedUnimplementedAsyncCalculatorServiceServer() {
}
func (UnimplementedAsyncCalculatorServiceServer) testEmbeddedByValue() {}

// UnsafeAsyncCalculatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AsyncCalculatorServiceServer will
// result in compilation errors.
type UnsafeAsyncCalculatorServiceServer interface {
	mustEmbedUnimplementedAsyncCalculatorServiceServer()
}

func RegisterAsyncCalculatorServiceServer(s grpc.ServiceRegistrar, srv AsyncCalculatorServiceServer) {
	// If the following call pancis, it indicates UnimplementedAsyncCalculatorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AsyncCalculatorService_ServiceDesc, srv)
}

func _AsyncCalculatorService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Undef)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncCalculatorServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncCalculatorService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncCalculatorServiceServer).GetTask(ctx, req.(*Undef))
	}
	return interceptor(ctx, in, info, handler)
}

func _AsyncCalculatorService_PostTaskResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AsyncCalculatorServiceServer).PostTaskResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AsyncCalculatorService_PostTaskResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AsyncCalculatorServiceServer).PostTaskResult(ctx, req.(*TaskResult))
	}
	return interceptor(ctx, in, info, handler)
}

// AsyncCalculatorService_ServiceDesc is the grpc.ServiceDesc for AsyncCalculatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AsyncCalculatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AsyncCalculatorService",
	HandlerType: (*AsyncCalculatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTask",
			Handler:    _AsyncCalculatorService_GetTask_Handler,
		},
		{
			MethodName: "PostTaskResult",
			Handler:    _AsyncCalculatorService_PostTaskResult_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/asyncCalculator.proto",
}
